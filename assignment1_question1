#%% Initialize the simulation: 
import rebound
import numpy as np 
import matplotlib.pyplot as plt 

# Make a list of the KBO names: 
theKBOS = ['K13GD8G','K15RR7Y','K15VG6A','K14UM9M']

sim = rebound.Simulation()
sim.add('Sun')
sim.add('Jupiter')
sim.add('Saturn')
sim.add('Uranus')
sim.add('Neptune')
for KBO in theKBOS:     # Add KBOS
    sim.add(KBO)
    
sim.integrator = 'whfast'       # Choose integrator
sim.move_to_com()               # Move to centre-of-mass

year = 2.*np.pi                  # One 2-pi orbit
rad2deg = 180./np.pi             # Constant to convert radians -> degrees
integrationTime = 10000.*year  # Integration time, in years
N_outputs = 1000                # Number of outputs

# Generate a linearly spaced time vector from 0 to the final integration
# time with 'N_outputs' elements: 
times = np.linspace(0.,integrationTime, N_outputs)      
sim.dt = 0.01*year      # Set integrator time step
sim.status()            # Print status

# Make a dictionary to link the body name to it's index in the 
# 'orbits' output of 'orbits = sim.calculate_orbits()':
bodies = {
    'Jupiter': 0,
    'Saturn': 1,
    'Uranus': 2,  
    'Neptune': 3,
    theKBOS[0]: 4,
    theKBOS[1]: 5,
    theKBOS[2]: 6,
    theKBOS[3]: 7
    }


theta_N21 = np.zeros((int(N_outputs),4))        # Pre-allocate theta
# Loop over time in times: 
for ii,time in enumerate(times): 
    sim.integrate(time)     # The integration
    orbits = sim.calculate_orbits()     # Calculate orbits @ this time step

    # Loop through the KBOs and calculate their 2:1 resonant argument with Neptune,
    # using enumerate(theKBOS) to index into the theta variable's columns, where each
    # column represents one of the KBO's resonance angle:
    for ik,KBO in enumerate(theKBOS):
        theta_N21[ii,ik] = rad2deg*(2*orbits[bodies[KBO]].l - orbits[bodies['Neptune']].l - orbits[bodies[KBO]].pomega)
    
#%% Plot 
fig = plt.figure(figsize=(10,10))
ax = plt.subplot(111)
for ik,KBO in enumerate(theKBOS):
    plt.plot(times/year,theta_N21[:,ik])
plt.xlabel('Time [years]')
plt.ylabel('Theta21')
plt.legend(theKBOS)



# %%
